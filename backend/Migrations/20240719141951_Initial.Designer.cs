// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TarotAppointment.Models;

#nullable disable

namespace TarotAppointment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240719141951_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TarotAppointment.Models.Admin", b =>
                {
                    b.Property<int>("admin_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("admin_id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("given_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("admin_id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TarotAppointment.Models.Appointment", b =>
                {
                    b.Property<int>("appointment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("appointment_id"));

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.Property<string>("date_appointment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("service_id")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("time_slot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("appointment_id");

                    b.HasIndex("client_id");

                    b.HasIndex("service_id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("TarotAppointment.Models.Client", b =>
                {
                    b.Property<int>("client_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("client_id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("given_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("client_id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TarotAppointment.Models.Message", b =>
                {
                    b.Property<int>("message_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("message_id"));

                    b.Property<int>("admin_id")
                        .HasColumnType("int");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("message_id");

                    b.HasIndex("admin_id");

                    b.HasIndex("client_id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("TarotAppointment.Models.Notification", b =>
                {
                    b.Property<int>("notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("notification_id"));

                    b.Property<int>("admin_id")
                        .HasColumnType("int");

                    b.Property<int>("appointment_id")
                        .HasColumnType("int");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("notification_id");

                    b.HasIndex("admin_id");

                    b.HasIndex("appointment_id");

                    b.HasIndex("client_id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TarotAppointment.Models.Schedule", b =>
                {
                    b.Property<int>("schedule_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("schedule_id"));

                    b.Property<int>("admin_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("number_slots")
                        .HasColumnType("int");

                    b.HasKey("schedule_id");

                    b.HasIndex("admin_id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("TarotAppointment.Models.Service", b =>
                {
                    b.Property<int>("service_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("service_id"));

                    b.Property<int>("admin_id")
                        .HasColumnType("int");

                    b.Property<int>("appointment_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("service_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("service_id");

                    b.HasIndex("admin_id");

                    b.HasIndex("appointment_id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TarotAppointment.Models.Student", b =>
                {
                    b.Property<int>("student_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("student_id"));

                    b.Property<string>("course")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("student_id");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("TarotAppointment.Models.Appointment", b =>
                {
                    b.HasOne("TarotAppointment.Models.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("client_id")
                        .IsRequired();

                    b.HasOne("TarotAppointment.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("service_id")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TarotAppointment.Models.Message", b =>
                {
                    b.HasOne("TarotAppointment.Models.Admin", "Admin")
                        .WithMany("Messages")
                        .HasForeignKey("admin_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TarotAppointment.Models.Client", "Client")
                        .WithMany("Messages")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TarotAppointment.Models.Notification", b =>
                {
                    b.HasOne("TarotAppointment.Models.Admin", "Admin")
                        .WithMany("Notifications")
                        .HasForeignKey("admin_id")
                        .IsRequired();

                    b.HasOne("TarotAppointment.Models.Appointment", "Appointment")
                        .WithMany("Notifications")
                        .HasForeignKey("appointment_id")
                        .IsRequired();

                    b.HasOne("TarotAppointment.Models.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("client_id")
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Appointment");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TarotAppointment.Models.Schedule", b =>
                {
                    b.HasOne("TarotAppointment.Models.Admin", "Admin")
                        .WithMany("Schedules")
                        .HasForeignKey("admin_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("TarotAppointment.Models.Service", b =>
                {
                    b.HasOne("TarotAppointment.Models.Admin", "Admin")
                        .WithMany("Services")
                        .HasForeignKey("admin_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TarotAppointment.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("appointment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("TarotAppointment.Models.Admin", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Schedules");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("TarotAppointment.Models.Appointment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TarotAppointment.Models.Client", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TarotAppointment.Models.Service", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
